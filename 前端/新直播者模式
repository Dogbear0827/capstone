<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>直播主後台 - WebRTC</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/mini.css/3.0.1/mini-default.min.css" />
    <style>
        body {
            margin: 20pt;
            font-family: Arial, sans-serif;
        }

        video {
            width: 100%;
            height: auto;
        }

        .main-container {
            display: flex;
        }

        /* 直播主後台的左側：WebRTC 播放視窗與功能按鈕 */
        .video-container {
            flex: 3;
            background-color: #f8eeee;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .chat-box {
            flex: 1;
            background-color: #fff;
            border-left: 1px solid #ddd;
            padding: 15px;
            display: flex;
            flex-direction: column;
        }

        #callInitiator, #callReceiver, #callOngoing {
            margin-top: 10px;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        #modal {
            display: none;
            background-color: rgba(0, 0, 0, 0.5);
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            justify-content: center;
            align-items: center;
        }

        #modalContent {
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            width: 400px;
            text-align: center;
        }

        button {
            padding: 10px 15px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }
        
        .primary {
            background-color: #f67280;
            color: white;
        }

        .secondary {
            background-color: #ea8685;
            color: white;
        }

        /* 顯示訊息區 */
        #messages {
            flex: 1;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 10px;
            margin-bottom: 10px;
            background: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- 左側：WebRTC 播放視窗與功能按鈕 -->
        <div class="video-container">
            <video id="localVideo" autoplay muted></video>
            <b><span id="showLocalUserName"></span></b>
            <video id="remoteVideo" autoplay></video>
            <b><span id="showRemoteUserName"></span></b>
            <div id="callInitiator">
                <input id="callToUsernameInput" type="text" placeholder="Username to call" />
                <button onclick="callBtnClick()" class="primary">Call</button>
            </div>
            <div id="callReceiver" style="display: none">
                <button id="answerBtn" class="primary">Answer</button>
                <button id="declineBtn" class="secondary">Decline</button>
            </div>
            <div id="callOngoing" style="display: none">
                <button onclick="hangUpClick()" class="secondary">Hang Up</button>
            </div>
        </div>

        <!-- 右側：聊天室 -->
        <div class="chat-box">
            <h2>聊天室</h2>
            <div id="messages"></div>
            <div id="chat-input-container">
                <input type="text" id="chat-input" placeholder="輸入訊息...">
                <button id="send-button" class="primary">發送</button>
            </div>
        </div>
    </div>

    <div id="modal">
        <div id="modalContent">
            <h2>Chrome 分享提示</h2>
            <p>請注意，Chrome 會要求您兩次選擇，第一次選擇分享畫面後，第二次會要求分享音訊。</p>
            <p>如果第二次出現提示，您可以選擇取消音訊分享。</p>
            <button onclick="closeModal()">我知道了</button>
        </div>
    </div>

    <script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
    <script>
        const localVideo = document.getElementById('localVideo');
        const remoteVideo = document.getElementById('remoteVideo');
        const showLocalUserName = document.getElementById('showLocalUserName');
        const showRemoteUserName = document.getElementById('showRemoteUserName');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');
        const messagesDiv = document.getElementById('messages');
        const callToUsernameInput = document.getElementById('callToUsernameInput');
        const callInitiator = document.getElementById('callInitiator');
        const callReceiver = document.getElementById('callReceiver');
        const callOngoing = document.getElementById('callOngoing');
        const answerBtn = document.getElementById('answerBtn');
        const declineBtn = document.getElementById('declineBtn');
        const modal = document.getElementById('modal');
        
        let localStream;
        let remoteStream;
        let peerConnection;
        let username;
        let otherUsername;
        let signalingServer; // Signal server for communication (WebSocket, etc.)

        // Function to initiate WebRTC call
        function callBtnClick() {
            otherUsername = callToUsernameInput.value;
            // Setup signaling and WebRTC connection
            console.log("Calling:", otherUsername);
            // Here you would typically send an offer to a signaling server
        }

        // Answer the call
        answerBtn.addEventListener('click', () => {
            // Answer the incoming call, set up the WebRTC connection, etc.
            console.log("Answered call from:", otherUsername);
        });

        // Decline the call
        declineBtn.addEventListener('click', () => {
            console.log("Call declined:", otherUsername);
            // Handle decline logic (close peer connection)
        });

        // Hang up the call
        function hangUpClick() {
            console.log("Hanging up call");
            // Close peer connection and stream
        }

        // Send message to chat
        sendButton.addEventListener('click', () => {
            const message = chatInput.value.trim();
            if (message) {
                const newMessage = document.createElement('p');
                newMessage.textContent = '你: ' + message;
                messagesDiv.appendChild(newMessage);
                chatInput.value = '';
            }
        });

        // Close modal
        function closeModal() {
            modal.style.display = 'none';
        }

        // Check if it's Chrome and show modal
        window.onload = function() {
            if (/Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor)) {
                modal.style.display = 'flex';
            }
        };
    </script>
</body>
</html>
