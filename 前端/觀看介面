<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GoodStream</title>
    <style>
        body {
            background-color: #f8eeee;
            margin: 0;
            display: flex;
            height: 100vh;
            font-family: Arial, sans-serif;
        }
        .sidebar {
            width: 200px;
            background-color: #d1a8a8;
            padding: 20px;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #c2c2c2;
        }
        .followed-streamer {
            margin-bottom: 15px;
            padding: 10px;
            background-color: #c2c2c2;
            border-radius: 5px;
            text-align: center;
            transition: background-color 0.3s;
            cursor: pointer;
        }
        .followed-streamer:hover {
            background-color: #b0b0b0;
        }
        .main-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 1vh;
            box-sizing: border-box;
            margin-left: 20px;
            margin-right: 25vw;
        }
        .video-container {
            width: 100%;
            max-width: 960px;
            height: 540px; /* Ë®≠ÁΩÆÂõ∫ÂÆöÈ´òÂ∫¶ */
            position: relative;
            background-color: #000; /* ËÉåÊôØËâ≤Ôºå‰ª•Èò≤ WebRTC ÈÇÑÊ≤íÊúâÈÄ£Á∑ö */
        }
        video {
            width: 100%;
            height: 100%;
            border-radius: 8px;
        }
        .button-container {
            display: flex;
            margin-top: 10px;
        }
        button {
            width: 100px;
            height: 40px;
            margin: 0 10px;
            border: none;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 20px;
        }
        .subscribe-btn { background: #6fe4f8; }
        .share-btn { background: #DC3545; }
        .follow-btn { background: #28a745; }
        .ring-btn {
            background: #6F42C1;
            width: 40px;
            height: 40px;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .bell-icon {
            width: 20px;
            height: 20px;
        }
        button:hover { opacity: 0.8; }
        .chat-box {
            width: 25vw;
            height: 100vh;
            background: #fff;
            border-left: 1px solid #ccc;
            padding: 1vw;
            position: fixed;
            top: 0;
            right: 0;
            display: flex;
            flex-direction: column;
            border-radius: 20px 0 0 20px;
            overflow: hidden;
        }
        h2 {
            margin: 0;
            padding: 10px 0;
            text-align: center;
        }
        #messages {
            flex-grow: 1;
            overflow-y: auto;
            border: 1px solid #ddd;
            padding: 5px;
            margin-bottom: 10px;
        }
        #chat-input {
            width: calc(100% - 50px);
            padding: 10px;
            margin-bottom: 10px;
            display: inline-block;
        }
        #send-button {
            width: 100%;
            height: 35px;
            margin-bottom: 25px;
            font-size: 18px;
            text-align: center;
            background-color: #007bff;
            color: white;
            transition: background-color 0.3s, transform 0.1s;
        }
        #send-button:hover {
            background-color: #0056b3;
        }
        #send-button:active {
            transform: scale(0.95);
        }
        #emoji-btn {
            width: 35px;
            height: 35px;
            background-color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            display: inline-block;
            position: absolute;
            right: -20px;
            top: 0;
            padding: 5px;
        }

        #emoji-btn img {
            width: 30px;
            height: 30px;
        }
        #emoji-picker {
            display: none;
            position: absolute;
            bottom: 50px;
            right: 50px;
            background: white;
            border: 1px solid #ccc;
            padding: 5px;
            border-radius: 8px;
            z-index: 10;
        }
        .emoji {
            cursor: pointer;
            margin: 5px;
            font-size: 20px;
        }
        .emoji:hover {
            transform: scale(1.2);
        }
        /* Ë®ÇÈñ±ÂíåÈÄÅÁ¶ÆË¶ñÁ™óÊ®£Âºè */
        .modal, .gift-modal, .follow-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }
        .modal-content, .gift-modal-content, .follow-modal-content {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
        }
        .gift-item {
            display: inline-block;
            margin: 10px;
            text-align: center;
            cursor: pointer;
        }
        .gift-image {
            width: 60px;
            height: 60px;
        }
        .confirm-btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .confirm-btn:hover {
            background-color: #0056b3;
        }
        .cancel-btn {
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
        }
        .cancel-btn:hover {
            background-color: #5a6268;
        }
    </style>
</head>
<body>
    <!-- Sidebar with followed streamers -->
    <div class="sidebar">
        <h2>ËøΩÈö®ÁöÑÂØ¶Ê≥Å‰∏ª</h2>
        <ul id="followed-list">
            <!-- This list will be dynamically updated with followed streamers -->
        </ul>
    </div>

    <div class="main-content">
        <div class="video-container">
            <!-- WebRTC Ë¶ñË®äÂÆπÂô® -->
            <video id="webRTCVideo" autoplay playsinline></video>
        </div>
        <div class="button-container">
            <button class="subscribe-btn" onclick="showSubscriptionModal()">Ë®ÇÈñ±</button>
            <button class="share-btn" onclick="showGiftModal()">ÈÄÅÁ¶Æ</button>
            <button id="follow-btn" class="follow-btn" onclick="toggleFollow('ÂØ¶Ê≥Å‰∏ª 1')">ËøΩÈö®</button>
            <button class="ring-btn" onclick="alert('Èà¥Èê∫ÊåâÈàïË¢´ÈªûÊìäÔºÅ')">
                <img src="https://img.icons8.com/ios-filled/50/ffffff/bell.png" alt="Èà¥Èê∫" class="bell-icon">
            </button>
        </div>
    </div>

    <div class="chat-box">
        <h2>ËÅäÂ§©ÂÆ§</h2>
        <div id="messages"></div>
        <div style="position: relative;">
            <input type="text" id="chat-input" placeholder="Ëº∏ÂÖ•Ë®äÊÅØ..." />
            <button id="emoji-btn" onclick="toggleEmojiPicker()">
                <img src="https://img.icons8.com/ios-filled/50/000000/like.png" alt="emoji" />
            </button>
            <div id="emoji-picker">
                <span class="emoji" onclick="addEmoji('üòä')">üòä</span>
                <span class="emoji" onclick="addEmoji('üòÇ')">üòÇ</span>
                <span class="emoji" onclick="addEmoji('‚ù§Ô∏è')">‚ù§Ô∏è</span>
                <span class="emoji" onclick="addEmoji('üòé')">üòé</span>
            </div>
            <button id="send-button" onclick="sendMessage()">ÁôºÈÄÅ</button>
        </div>
    </div>

    <!-- Ë®ÇÈñ± Modal -->
    <div id="subscriptionModal" class="modal">
        <div class="modal-content">
            <h2>Á¢∫ÂÆöË¶ÅËä±ÁæéÈáë7777$Ë®ÇÈñ±ÂóéÔºü</h2>
            <button class="confirm-btn" onclick="confirmSubscription()">Á¢∫ÂÆö</button>
            <button class="cancel-btn" onclick="closeModal()">ÂèñÊ∂à</button>
        </div>
    </div>

    <!-- ÈÄÅÁ¶ÆË¶ñÁ™ó -->
    <div class="gift-modal" id="giftModal">
        <div class="gift-modal-content">
            <h2>ÈÅ∏ÊìáË¶ÅË¥àÈÄÅÁöÑÁ¶ÆÁâ©</h2>
            <div class="gift-item" onclick="sendGift('ÁÅ´ÁÆ≠', 100)">
                <img src="https://img.icons8.com/ios-filled/100/007bff/rocket.png" class="gift-image" alt="ÁÅ´ÁÆ≠">
                <div class="gift-price">100$</div>
            </div>
            <div class="gift-item" onclick="sendGift('ËõãÁ≥ï', 80)">
                <img src="https://img.icons8.com/ios-filled/100/007bff/cake.png" class="gift-image" alt="ËõãÁ≥ï">
                <div class="gift-price">80$</div>
            </div>
            <div class="gift-item" onclick="sendGift('Á¶ÆÁâ©', 50)">
                <img src="https://img.icons8.com/ios-filled/100/007bff/gift.png" class="gift-image" alt="Á¶ÆÁâ©">
                <div class="gift-price">50$</div>
            </div>
            <div class="gift-item" onclick="sendGift('ÁÜäË≤ì', 40)">
                <img src="https://img.icons8.com/ios-filled/100/007bff/panda.png" class="gift-image" alt="ÁÜäË≤ì">
                <div class="gift-price">40$</div>
            </div>
            <button class="cancel-btn" onclick="closeGiftModal()">ÂèñÊ∂à</button>
        </div>
    </div>

    <!-- ËøΩÈö® Modal -->
    <div id="followModal" class="follow-modal">
        <div class="follow-modal-content">
            <h2>Â∑≤ËøΩÈö®</h2>
            <p>ÊÇ®Â∑≤Á∂ìËøΩÈö®ÈÄôÂÄãÂØ¶Ê≥Å‰∏ª„ÄÇ</p>
            <button class="cancel-btn" onclick="closeFollowModal()">ÂèñÊ∂à</button>
        </div>
    </div>

    <script>
        const userName = "User123";
        const followedList = document.getElementById('followed-list');
        let followedStreamers = [];  // Â≠òÂÑ≤Â∑≤ËøΩÈö®ÁöÑÂØ¶Ê≥Å‰∏ª

        // ÂàáÊèõËøΩÈö®ÁãÄÊÖã
        function toggleFollow(streamerName) {
            const followButton = document.getElementById('follow-btn');
            if (followedStreamers.includes(streamerName)) {
                // ÂèñÊ∂àËøΩÈö®
                followedStreamers = followedStreamers.filter(name => name !== streamerName);
                followButton.textContent = 'ËøΩÈö®';
                removeFollowedStreamer(streamerName);
            } else {
                // ËøΩÈö®
                followedStreamers.push(streamerName);
                followButton.textContent = 'ÂèñÊ∂àËøΩÈö®';
                addFollowedStreamer(streamerName);
            }
        }

        // Ê∑ªÂä†ËøΩÈö®ÁöÑÂØ¶Ê≥Å‰∏ªÂà∞ÂÅ¥ÈÇäÊ¨Ñ
        function addFollowedStreamer(streamerName) {
            const listItem = document.createElement('li');
            listItem.classList.add('followed-streamer');
            listItem.textContent = `Â∑≤ËøΩÈö®Ôºö${streamerName}`;
            followedList.appendChild(listItem);
        }

        // ÂæûÂÅ¥ÈÇäÊ¨ÑÁßªÈô§ËøΩÈö®ÁöÑÂØ¶Ê≥Å‰∏ª
        function removeFollowedStreamer(streamerName) {
            const listItems = followedList.getElementsByTagName('li');
            for (let item of listItems) {
                if (item.textContent === `Â∑≤ËøΩÈö®Ôºö${streamerName}`) {
                    followedList.removeChild(item);
                    break;
                }
            }
        }

        // È°ØÁ§∫Ë®ÇÈñ±Ë¶ñÁ™ó
        function showSubscriptionModal() {
            document.getElementById('subscriptionModal').style.display = 'flex';
        }

        // Ë®ÇÈñ±Á¢∫Ë™ç
        function confirmSubscription() {
            addMessageToChat(`${userName}: ÊÑüË¨ùÊÇ®ÁöÑË®ÇÈñ±!!`);
            closeModal();
        }

        // ÈóúÈñâË®ÇÈñ±Ë¶ñÁ™ó
        function closeModal() {
            document.getElementById('subscriptionModal').style.display = 'none';
        }

        // È°ØÁ§∫ÈÄÅÁ¶ÆË¶ñÁ™ó
        function showGiftModal() {
            document.getElementById('giftModal').style.display = 'flex';
        }

        // ÈÄÅÁ¶ÆÂäüËÉΩ
        function sendGift(giftName, price) {
            addMessageToChat(`${userName}: ÊÑüË¨ùÊÇ®ÁöÑÈÄÅÁ¶Æ (${giftName})`);
            closeGiftModal();
        }

        // ÈóúÈñâÈÄÅÁ¶ÆË¶ñÁ™ó
        function closeGiftModal() {
            document.getElementById('giftModal').style.display = 'none';
        }

        // È°ØÁ§∫Â∑≤ËøΩÈö®ÊèêÁ§∫
        function closeFollowModal() {
            document.getElementById('followModal').style.display = 'none';
        }

        // ÁôºÈÄÅË®äÊÅØÂà∞ËÅäÂ§©ÂÆ§
        function sendMessage() {
            const message = document.getElementById('chat-input').value;
            if (message.trim()) {
                addMessageToChat(`${userName}: ${message}`);
                document.getElementById('chat-input').value = '';
            }
        }

        // Ê∑ªÂä†Ë®äÊÅØÂà∞ËÅäÂ§©ÂÆ§
        function addMessageToChat(message) {
            const messagesDiv = document.getElementById('messages');
            messagesDiv.innerHTML += `<p>${message}</p>`;
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        // È°ØÁ§∫Ë°®ÊÉÖÁ¨¶ËôüÈÅ∏ÊìáÂô®
        function toggleEmojiPicker() {
            const picker = document.getElementById('emoji-picker');
            picker.style.display = picker.style.display === 'none' || picker.style.display === '' ? 'block' : 'none';
        }

        // Ê∑ªÂä†Ë°®ÊÉÖÁ¨¶ËôüÂà∞Ëº∏ÂÖ•Ê°Ü
        function addEmoji(emoji) {
            const input = document.getElementById('chat-input');
            input.value += emoji;
            toggleEmojiPicker();
        }

        // WebRTC Áõ∏ÈóúÂäüËÉΩ
        let localStream;
        let peerConnection;
        const videoElement = document.getElementById('webRTCVideo');

        // ÂàùÂßãÂåñ WebRTC ÈÄ£Êé•
        function initializeWebRTC() {
            // È†êË®≠Ë®≠ÂÆö
            const configuration = {
                iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]  // ‰ΩøÁî®GoogleÁöÑSTUN‰º∫ÊúçÂô®
            };
            peerConnection = new RTCPeerConnection(configuration);

            // Ë®≠ÂÆö WebRTC ÈÄ£Êé•
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    console.log('Êñ∞ICEÂÄôÈÅ∏:', event.candidate);
                    // ÁôºÈÄÅcandidateÂà∞Â∞çÊñπ
                }
            };

            peerConnection.ontrack = (event) => {
                // Êí≠ÊîæÊé•Êî∂Âà∞ÁöÑË¶ñË®äÊµÅ
                videoElement.srcObject = event.streams[0];
            };

            // ÂèñÂæóÊú¨Âú∞Ë¶ñË®äÊµÅ‰∏¶Â∞áÂÖ∂ÂÇ≥ÈÄÅÂà∞Â∞çÊñπ
            navigator.mediaDevices.getUserMedia({ video: true, audio: true })
                .then((stream) => {
                    localStream = stream;
                    videoElement.srcObject = localStream;
                    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
                })
                .catch((error) => {
                    console.error('ÁÑ°Ê≥ïÂïüÂãïÁõ∏Ê©üÊàñÈ∫•ÂÖãÈ¢®:', error);
                });
        }

        // ÂïüÂãï WebRTC
        initializeWebRTC();
    </script>
</body>
</html>
