<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>直播主後台</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f8eeee;
            display: flex;
            height: 100vh;
            overflow: hidden;
        }
        .main-container {
            display: flex;
            flex: 1;
        }
        .video-container {
            display: flex;
            flex: 3;
            background-color: #f8eeee;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;
            padding: 0;
            position: relative;
        }
        #screenVideo, #cameraVideo {
            width: 45%;
            height: 45%;
            background-color: #000;
            border-radius: 0;
            position: absolute;
            cursor: move;
            resize: both;
            overflow: auto;
        }
        #screenVideo {
            top: 10%;
            left: 5%;
        }
        #cameraVideo {
            top: 10%;
            right: 5%;
        }
        .button-container {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 10px;
        z-index: 10; /* 確保按鈕在最上層 */
    }
        button {
            padding: 10px 15px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            color: #fff;
            transition: background-color 0.3s, transform 0.1s;
        }
        .screen-share-btn {
            background-color: #f67280;
        }
        .camera-btn {
            background-color: #f8a5c2;
        }
        .stop-btn {
            background-color: #ea8685;
        }
        button:hover {
            opacity: 0.8;
        }
        button:active {
            transform: scale(0.95);
        }
        .chat-box {
            flex: 1;
            background-color: #fff;
            border-left: 1px solid #ddd;
            display: flex;
            flex-direction: column;
            padding: 15px;
            overflow: hidden;
        }
        h2 {
            text-align: center;
            margin: 0 0 10px;
        }
        #messages {
            flex: 1;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 10px;
            margin-bottom: 10px;
            background: #f8f9fa;
        }
        #chat-input-container {
            display: flex;
            align-items: center;
        }
        #chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 8px;
        }
        #send-button {
            margin-left: 10px;
            padding: 10px 15px;
            background-color: #f67280;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }
        #send-button:hover {
            background-color: #e55039;
        }
        #send-button:active {
            transform: scale(0.95);
        }
    </style>
</head>
<body>
    <div class="main-container">
        <!-- 左側：WebRTC 播放視窗與功能按鈕 -->
        <div class="video-container">
            <video id="screenVideo" autoplay playsinline muted></video>
            <video id="cameraVideo" autoplay playsinline muted></video>
            <div class="button-container">
                <button class="screen-share-btn" id="screenShareButton">分享螢幕</button>
                <button class="camera-btn" id="cameraShareButton">分享鏡頭</button>
                <button class="stop-btn" id="stopButton">STOP</button>
            </div>
        </div>
        <!-- 右側：聊天室 -->
        <div class="chat-box">
            <h2>聊天室</h2>
            <div id="messages"></div>
            <div id="chat-input-container">
                <input type="text" id="chat-input" placeholder="輸入訊息...">
                <button id="send-button">發送</button>
            </div>
        </div>
    </div>
    <script src="signaling-server.js"></script>
    <script>
        const screenVideo = document.getElementById('screenVideo');
        const cameraVideo = document.getElementById('cameraVideo');
        const screenShareButton = document.getElementById('screenShareButton');
        const cameraShareButton = document.getElementById('cameraShareButton');
        const stopButton = document.getElementById('stopButton');
        const messagesDiv = document.getElementById('messages');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');

        let screenStream;
        let cameraStream;

        // 分享螢幕功能
        screenShareButton.addEventListener('click', async () => {
            try {
                screenStream = await navigator.mediaDevices.getDisplayMedia({
                    video: true
                });
                screenVideo.srcObject = screenStream;
                screenStream.getTracks().forEach(track => peerConnection.addTrack(track, screenStream));
                startStreaming();
            } catch (err) {
                console.error('無法分享螢幕:', err);
                alert('無法啟用螢幕分享功能！');
            }
        });

        // 分享鏡頭視訊
        cameraShareButton.addEventListener('click', async () => {
            try {
                cameraStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });
                cameraVideo.srcObject = cameraStream;
                cameraStream.getTracks().forEach(track => peerConnection.addTrack(track, cameraStream));
                startStreaming();
            } catch (err) {
                console.error('無法分享鏡頭:', err);
                alert('無法啟用鏡頭分享功能！');
            }
        });

        // 停止串流功能
        stopButton.addEventListener('click', () => {
            if (screenStream) {
                screenStream.getTracks().forEach(track => track.stop());
                screenVideo.srcObject = null;
                screenStream = null;
            }
            if (cameraStream) {
                cameraStream.getTracks().forEach(track => track.stop());
                cameraVideo.srcObject = null;
                cameraStream = null;
            }
            alert('分享已停止！');
        });

        // 讓影片可以拖動與縮放功能
        function makeElementDraggableAndResizable(elm) {
            let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
            elm.onmousedown = dragMouseDown;

            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                // get the mouse cursor position at startup:
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                // call a function whenever the cursor moves:
                document.onmousemove = elementDrag;
            }

            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                // calculate the new cursor position:
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                // set the element's new position:
                elm.style.top = (elm.offsetTop - pos2) + "px";
                elm.style.left = (elm.offsetLeft - pos1) + "px";
            }

            function closeDragElement() {
                // stop moving when mouse button is released:
                document.onmouseup = null;
                document.onmousemove = null;
            }

            // 添加縮放功能
            elm.addEventListener('wheel', (e) => {
                e.preventDefault();
                let scale = parseFloat(elm.style.transform.replace('scale(', '').replace(')', '')) || 1;
                if (e.deltaY < 0) {
                    // 放大
                    scale += 0.1;
                } else {
                    // 縮小
                    scale = Math.max(0.1, scale - 0.1);
                }
                elm.style.transform = `scale(${scale})`;
            });
        }

        makeElementDraggableAndResizable(screenVideo);
        makeElementDraggableAndResizable(cameraVideo);

        // 發送聊天室訊息
        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') sendMessage();
        });

        function sendMessage() {
            const message = chatInput.value.trim();
            if (message) {
                addMessageToChat(`你: ${message}`);
                chatInput.value = '';
            }
        }

        function addMessageToChat(message) {
            const messageElem = document.createElement('p');
            messageElem.textContent = message;
            messagesDiv.appendChild(messageElem);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }

        const signalingServerUrl = 'ws://localhost:8080';
        const signalingSocket = new WebSocket(signalingServerUrl);
        const peerConnection = new RTCPeerConnection({
            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
        });

        signalingSocket.onopen = () => {
            console.log('Connected to the signaling server');
        };

        signalingSocket.onmessage = async (message) => {
            const data = JSON.parse(message.data);
            if (data.type === 'answer') {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(data));
            } else if (data.type === 'candidate') {
                await peerConnection.addIceCandidate(new RTCIceCandidate(data.candidate));
            }
        };

        async function startStreaming() {
            try {
                // 創建 offer 並發送給觀眾端
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                signalingSocket.send(JSON.stringify({ type: 'offer', sdp: offer.sdp }));
            } catch (err) {
                console.error('分享時發生錯誤:', err);
            }
        }

        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                signalingSocket.send(JSON.stringify({ type: 'candidate', candidate: event.candidate }));
            }
        };

        peerConnection.ontrack = (event) => {
            console.log('Track received:', event);
        };
    </script>
</body>
</html>
